#!/usr/bin/python3
"""
Test cases for BaseGeometry class.
"""

BG = __import__("7-base_geometry").BaseGeometry

# Checking for module docstring
m = __import__("7-base_geometry").__doc__
assert len(m) > 1

# Checking for class docstring
c = __import__("7-base_geometry").BaseGeometry.__doc__
assert len(c) > 1

# Checking for method docstring
mod1 = __import__("7-base_geometry").BaseGeometry.area.__doc__
assert len(mod1) > 1
mod2 = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
assert len(mod2) > 1

# Checking for area failure
b = BG()
try:
    b.area()
except Exception as e:
    assert str(e) == "area() is not implemented"

# Checking too many arguments for area
try:
    b.area(1)
except TypeError as e:
    assert str(e) == "area() takes 1 positional argument but 2 were given"

# Checking integer validator for passing integer
b.integer_validator("integer", 1)

# Checking for integer == 0
try:
    b.integer_validator("integer", 0)
except ValueError as e:
    assert str(e) == "integer must be greater than 0"

# Checking for integer < 0
try:
    b.integer_validator("integer", -5)
except ValueError as e:
    assert str(e) == "integer must be greater than 0"

# Checking for non-integer types
try:
    b.integer_validator("bool", True)
except TypeError as e:
    assert str(e) == "bool must be an integer"
try:
    b.integer_validator("float", 1.5)
except TypeError as e:
    assert str(e) == "float must be an integer"
try:
    b.integer_validator("complex", complex(1, 1))
except TypeError as e:
    assert str(e) == "complex must be an integer"
try:
    b.integer_validator("string", "hello")
except TypeError as e:
    assert str(e) == "string must be an integer"
try:
    b.integer_validator("tuple", (1, 2))
except TypeError as e:
    assert str(e) == "tuple must be an integer"
try:
    b.integer_validator("list", [1, 2, 3])
except TypeError as e:
    assert str(e) == "list must be an integer"
try:
    b.integer_validator("dict", {"key": "value"})
except TypeError as e:
    assert str(e) == "dict must be an integer"
try:
    b.integer_validator("set", {"hello", "world"})
except TypeError as e:
    assert str(e) == "set must be an integer"
try:
    b.integer_validator("frozenset", frozenset(["hello", "world"]))
except TypeError as e:
    assert str(e) == "frozenset must be an integer"
try:
    b.integer_validator("bytes", b"bytes")
except TypeError as e:
    assert str(e) == "bytes must be an integer"
try:
    b.integer_validator("bytearrays", bytearray(b"bytes"))
except TypeError as e:
    assert str(e) == "bytearrays must be an integer"

# Checking for no arguments to integer_validator
try:
    b.integer_validator()
except TypeError as e:
    assert str(e) == "integer_validator() missing 2 required positional arguments: 'name' and 'value'"

# Checking for only 1 argument to integer_validator
try:
    b.integer_validator("integer")
except TypeError as e:
    assert str(e) == "integer_validator() missing 1 required positional argument: 'value'"

# Checking for too many arguments
try:
    b.integer_validator("integer", 1, 2)
except TypeError as e:
    assert str(e) == "integer_validator() takes 3 positional arguments but 4 were given"

print("All tests passed!")
