def test_numpy_matrix_multiply():
    """
    Test cases for the NumPy matrix multiplication function.

    >>> import numpy as np
    >>> a = np.array([[1, 2], [3, 4]])
    >>> b = np.array([[5, 6], [7, 8]])
    >>> numpy_matrix_multiply(a, b)
    array([[19, 22],
           [43, 50]])

    >>> c = np.array([[1, 2, 3], [4, 5, 6]])
    >>> d = np.array([[7, 8], [9, 10], [11, 12]])
    >>> numpy_matrix_multiply(c, d)
    array([[ 58,  64],
           [139, 154]])

    >>> e = np.array([[1, 2], [3, 4]])
    >>> f = np.array([[5, 6, 7], [8, 9, 10]])
    >>> numpy_matrix_multiply(e, f)
    Traceback (most recent call last):
        ...
    ValueError: shapes (2,2) and (2,3) not aligned: 2 (dim 1) != 2 (dim 0)

    >>> g = np.array([[1, 2], [3, 4]])
    >>> h = np.array([])
    >>> numpy_matrix_multiply(g, h)
    Traceback (most recent call last):
        ...
    ValueError: shapes (2,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)

    >>> i = np.array([[1, 2], [3, 4]])
    >>> j = np.array([[], []])
    >>> numpy_matrix_multiply(i, j)
    Traceback (most recent call last):
        ...
    ValueError: shapes (2,2) and (2,0) not aligned: 2 (dim 1) != 2 (dim 0)

    >>> k = np.array([])
    >>> l = np.array([])
    >>> numpy_matrix_multiply(k, l)
    Traceback (most recent call last):
        ...
    ValueError: shapes (0,) and (0,) not aligned: 0 (dim 0) != 0 (dim 0)
    """
    pass

if __name__ == "__main__":
    import doctest
    doctest.testmod()
